<%doc>
Show a list of all addresses within a subnet.
</%doc>

<%args>
$network
$user  => $ui->get_current_user($r)
</%args>

<%once>
# Map IP status to <div> classes
my %classes = (
    Static     => 'ipaddr_static', 
    Dynamic    => 'ipaddr_dynamic',
    Reserved   => 'ipaddr_reserved',
    Container  => 'ipaddr_container',
    Discovered => 'ipaddr_discovered',
    Available  => 'ipaddr_available',
    );

# make_cell subroutine
my $make_cell = sub {
    my (%argv) = @_;
    my ($caller, $id, $addr, $disp_addr, $divtitle, $divclass, 
	$priv_user, $can_edit, $can_choose, $subnet_id, $used) = 
	@argv{'caller', 'id', 'addr', 'disp_addr', 'divtitle', 'divclass', 
	      'priv_user', 'can_edit', 'can_choose', 'subnet_id', 'used'};

    our $DISCOVERED_OVERWRITE;

    # Wrap the displayed address in a div before wrapping it in an anchor tag
    # so that the whole cell is clickable.
    $disp_addr = '<div class="'.$divclass.'" title="'.$divtitle.'" width="100%">'.$disp_addr.'</div>';
    my $str = $disp_addr;
    if ( $caller eq 'choose_ip.html' ){
	# Called as a popup window
	if (!$used || ($used && $divclass eq 'ipaddr_available') ){
	    if ( ($priv_user && $can_edit) || $can_choose ){
		$str = sprintf('<a href="#" onClick="selectAddr(\'%s\')">%s</a>',
			       $addr, $disp_addr);
	    }
	}
    }elsif ( $caller eq 'ip.html' ){
	my $comp = $caller;
	if ( $used ){
	    # Address exists in DB
	    if( $divclass eq 'ipaddr_available' ) {
		if ( $priv_user && $can_edit ){
		    # User is either admin or operator with edit rights
		    $str = '<a href="'.$comp.'?id='.$id.'" class="ipaddr">'.$str.'</a>';
		}elsif ( $can_choose ){
		    # User is regular user, but has choose_ip rights
		    $str = '<a href="../user_management/add_host.html?address='.$addr.
			'&add_host_block='.$subnet_id.'" class="ipaddr">'.$str.'</a>';
		}
	    }elsif ( $divclass eq 'ipaddr_static' || $priv_user ){
		$str = '<a href="'.$comp.'?id='.$id.'" class="ipaddr">'.$str.'</a>';
		
	    }elsif ( $DISCOVERED_OVERWRITE && ($divclass eq 'ipaddr_discovered') ) {
		if ( $priv_user && $can_edit ){
		    # User is either admin or operator with edit rights
		    $str = '<a href="'.$comp.'?id='.$id.'" class="ipaddr">'.$str.'</a>';
		}elsif ( $can_choose ){
		    # User is regular user, but has choose_ip rights
		    $str = '<a href="../user_management/add_host.html?address='.$addr.
			'&add_host_block='.$subnet_id.'" class="ipaddr">'.$str.'</a>';
		}
	    }
	}else{
	    if ( $priv_user && $can_edit ){
		# link this address to the "Add" section in ip.html
		$str = '<a href="'.$comp.'?add_block_prefix='.$addr.
		    '%2F32&add_block_parent='.$subnet_id.
		    '&_action=ADD_BLOCK" class="ipaddr">'.$str.'</a>';
	    }elsif ( $can_choose ){
		$str = '<a href="../user_management/add_host.html?address='.$addr.
		    '&add_host_block='.$subnet_id.'" class="ipaddr">'.$str.'</a>';
	    }
	}
    }
    return $str;
};
</%once>

<%init>

my $BLOCK_MAX = Netdot->config->get('SUBNET_BLOCK_VIEW_MAX_PREFIX');
our $DISCOVERED_OVERWRITE = Netdot->config->get('USER_DISCOVERED_OVERWRITE');

if ( $network->version == 4 && $network->prefix < $BLOCK_MAX ){
    print "This subnet is too big for the block view";
    $m->abort;
}elsif ( $network->version == 6 ){
    print "Block view not supported yet for IPv6 subnets";
    $m->abort;
}

my %used;
my %names;
my %status;
my %ids;
my @children; 
my $dbh = Netdot::Model->db_Main();
my $id = $network->id;
my $manager = $ui->get_permission_manager($r);

my $priv_user  = ($manager && $manager->can($user, "access_section", 'subnet.mhtml:ip_add_link'))? 1 : 0;
my $can_edit   = ($manager && $manager->can($user, 'edit', $network))? 1 : 0;
my $can_choose = ($manager && $manager->can($user, 'choose_ip', $network))? 1 : 0;
my $caller = $m->caller->name;
</%init>


<div class="containerheadright">
Legend:
<span class="ipaddr_available">Available</span>
<span class="ipaddr_discovered">Discovered</span>
<span class="ipaddr_dynamic">Dynamic</span>
<span class="ipaddr_static">Static</span>
<span class="ipaddr_reserved">Reserved</span>
</div>

<%perl>

my $q = "SELECT   ipblock.id, ipblock.address, ipblock.description, ipblockstatus.name, 
                  rr.name, device.id
         FROM     ipblockstatus, ipblock 
                  LEFT JOIN (rr CROSS JOIN rraddr) ON (ipblock.id=rraddr.ipblock AND rraddr.rr=rr.id)
                  LEFT JOIN (device CROSS JOIN interface) 
                    ON (ipblock.interface=interface.id AND interface.device=device.id)
         WHERE    ipblock.parent=$id
           AND    ipblock.status=ipblockstatus.id
         ORDER BY ipblock.address";

my $results = $dbh->selectall_arrayref($q);

foreach my $r ( @$results ){
    my ( $ipid, $address, $description, $status, $dnsname, $device ) = @$r;
    $used{$address}  = 1;
    $names{$address} = $status;  # default to show status first
    
    if( $status eq "Static" ) {
	if( $dnsname ) {
	    $names{$address} = $dnsname;
	}elsif( $device ){
	    if ( my $lbl = Device->retrieve($device)->get_label ) {
		$names{$address} = $lbl;
	    }
	}
    }else{
	$names{$address} = $description if ( $description ) ;
    }
    $status{$address}  = $status;
    $ids{$address} = $ipid;
}

my $net = $network->netaddr();
my $mask = $net->masklen;

my @headers = ( );
my @rows;
my $cols;

$net = $net->network();  # start printing from the first address, in case $net was not at the start of the subnet

if( $mask == 31 ) {
    $cols = $net->num();
}elsif( $mask > 28 ) {
    # if there are less than 16 addresses in the subnet, show only that many columns
    $cols = $net->num()+2;
} else {
    # if there are 16 or more addresses, show 16 columns
    $cols = 16;
}

my $num = ($mask == 31)? $net->num() : $net->num()+1;
for( my $i=0; $i<($num/$cols); $i++ ) {
    my @row = ();

    for( my $j=0; $j<$cols; $j++ ) {
	my $ip_addr     = $net->addr;
	my $disp_addr   = $ip_addr;
	my $status_name = $status{$net->numeric};
	my $divclass    = $classes{$status_name} || 'ipaddr_available';
	my $divtitle    = $names{$net->numeric} || $net->addr;
	
	# hide network octets
	if ( $mask >= 24 ){
	    # only 4th octet is significant
	    $disp_addr =~ s/^\d+\.\d+\.\d+\.(\d+)$/$1/o;
	}elsif ( $mask >= 16 ){
	    # first and second octets are insignificant
	    $disp_addr =~ s/^\d+\.\d+\.(\d+\.\d+)$/$1/o;
	}elsif ( $mask >= 8 ){
	    # first octet is insignificant
	    $disp_addr =~ s/^\d+\.(\d+\.\d+\.\d+)$/$1/o;
	}

	if( ( ($net == $net->network) && ($mask != 31)) && !$network->use_network_broadcast ){
	    # don't allow selection of network or broadcast addresses
	    $disp_addr = '<div class="ipaddr_disabled" title="Network">'.$disp_addr.'</div>';

	}elsif ( ($net == $net->broadcast && $mask != 31) && !$network->use_network_broadcast ){
	    # don't allow selection of network or broadcast addresses
	    $disp_addr = '<div class="ipaddr_disabled" title="Broadcast">'.$disp_addr.'</div>';

	}else {
	    my $used = (exists $used{$net->numeric})? 1 : 0;
	    my $id = $ids{$net->numeric};
	    $disp_addr = $make_cell->(
		addr=>$ip_addr, disp_addr=>$disp_addr, divclass=>$divclass, divtitle=>$divtitle,
		id=>$id, subnet_id=>$network->id, used=>$used,
		priv_user=>$priv_user, can_edit=>$can_edit, can_choose=>$can_choose, 
		caller=>$caller,
		);
	}
	push( @row, $disp_addr );
	$net++;                      # increment the IP address
    }

    push( @rows, \@row );
}

</%perl>

<& /generic/data_table.mhtml,
    field_headers => \@headers,
    data          => \@rows,
    subclass      => "ipb",
    table_classes => ('ip_block_subnet_view'),
&>

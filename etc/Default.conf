######################################################################
# Do not modify anything here.  Instead, create a file called
# Site.conf in this same dir and copy relevant sections there
# ( inside the $config hash ) changing values as needed.  
# These are only defaults.
######################################################################

my $config = {

#####################################################################
#
# User Interface
#
#####################################################################

# The name of the machine or virtual host where Netdot is located
NETDOTNAME  => 'netdot.localdomain', 

# Max number of items in dynamically generated drop-down lists
DEFAULT_SELECTMAX  => 100,

# Maximum entries displayed per page
DEFAULT_PERPAGE => 50,

# Where Netdot will read authorization attributes from (what unprivileged
# users can or cannot see or do). Notice this is *not* for authentication (logging in).
# Authentication is configured in Apache. e.g. netdot_apache2_radius.conf.
# Current valid values: 
#  'Local'  => From Netdot database
#   RADIUS and LDAP authorization will be implemented in future versions
AUTHORIZATION_METHOD => 'Local',

# Which server(s) to query for authorization attributes 
# (Only if AUTHORIZATION METHOD is RADIUS or LDAP)
# This is not supported yet
#AUTHORIZATION_SERVER1 => 'authzserver1',
#AUTHORIZATION_SERVER2 => 'authzserver2',

# If using remote authentication but local authorization, this option
# tells Netdot to create a Person object with the given user type
# when a Person object is not found for the authenticated username
#
# Valid values are 'User', 'Operator', 'Admin' and 'none'
DEFAULT_REMOTE_AUTHED_USER_TYPE => 'User',

# Max number of IP records returned by search functions
IPMAXSEARCH => 200,

# IP address space is organized hierarchically in tree structures.
# Root IP blocks are blocks who have no parent node in the tree.
# This option determines whether these root blocks should be
# displayed automatically when clicking on the Address Space tab
# of the Management section. If you have too many root blocks,
# the query may take too long and you can disable this.
SHOW_ROOT_BLOCKS => 1,

# Max number of root blocks to display in Address Space management section
ROOT_BLOCK_SHOW_MAX => 50,

# At what point do we no longer display the number of 
# hosts available, and switch to percentages?
# Used in ip.html underneath the "Utilization" field
# for an address.
#
SHOW_COUNT_THRESHOLD => 65536,

# Show "discovered" IPv6 addresses as children on ip.html
IPV6_HIDE_DISCOVERED => 1,

# Web-based whois server URL for AS number lookups from Netdot's device pages
# Only available substitution is <ASNUMBER>
BGP_AS_WHOIS_URL => "http://www.radb.net/query/?keywords=AS<ASNUMBER>&submit=Query",

# Number of latest ARP entries to show for a given IP or MAC address
SHOW_LAST_N_ARP => 10,

# Number of latest Forwarding Table entries to show a given MAC address
SHOW_LAST_N_FTE => 10,

# Default view for IP blocks
# It can be one of 'block', 'list' or 'tree'
DEFAULT_IPBLOCK_VIEW => 'block',

# Default row size for IPblock 'block' view
DEFAULT_IPBLOCK_ROWSIZE => 22, 

# Whether regular users are offered an option to change their
# passwords (local password authentication only).
# Of course, this should be false if you are using LDAP or
# RADIUS authentication
USER_CAN_CHANGE_PASSWORD => 1,

# Indicate to regular users that they should enter the 
# host-specific part of the IPv6 address only. 
# If you want them to enter the whole address, set this to 0.
IPV6_ADDRESS_USER_ENTRY_HOST_ONLY => 1,

# Each time that a user performs a database operation, the
# activity can be recorded in the 'audit' table. Set to 0
# if you do not wish to record such activity
AUDIT_USER_ACTIVITY => 1,

# Allow users to overwrite 'discovered' IP entries
USER_DISCOVERED_OVERWRITE => 1,

# Default number of Audit records to show for each object
DEFAULT_MAX_AUDIT  => 100,

# Configure how Netdot formats MAC addresses for displaying in the web UI.
#
# Possible values are 'upper' and 'lower'.
MAC_DISPLAY_FORMAT_CASENESS => 'upper',

# Allow setting the caseness of MAC addresses in the generated DHCPD config
# file.
MAC_DHCPD_FORMAT_CASENESS => 'upper',

# Common delimiter strings include, ':', '-', and '.'.
MAC_DISPLAY_FORMAT_DELIMITER_STRING => '',

# Define how often to insert the delimiter string into the MAC address.
# Possible values are 0, 1, 2, 3, 4, 6.
MAC_DISPLAY_FORMAT_DELIMITER_INTERVAL => 0,

#################################################################
#
# Database setup
#
#################################################################

#
# DB_TYPE defines what sort of database NetDoT trys to talk to
# [mysql|Pg]

DB_TYPE =>  'mysql',

# DB_HOME is where the Database's commandline tools live.  $DB_HOME/bin
# should contain the binaries themselves, e.g. if "which mysql" gives
# "/usr/local/mysql/bin/mysql", $DB_HOME should be "/usr/local/mysql"

DB_HOME => '/usr',

# Set DB_DBA to the name of a DB user with permission to create new databases 
# Set DB_DBA_PASSWORD to that user's password (if you don't, you'll be prompted
# later)

# For mysql, you can try 'root'.  For Pg, it is usually 'postgres'

DB_DBA          =>  'root',
DB_DBA_PASSWORD =>  '',
 
#
# Set this to the Fully Qualified Domain Name of your database server.
# If the database is local, rather than on a remote host, using "localhost" 
# will greatly enhance performance.

DB_HOST =>  'localhost',

# If you're not running your database server on its default port, 
# specify the port the database server is running on below.  
# With mysql, it is usually safe to leave this blank.
# With Pg, you will probably want to use '5432'

DB_PORT => '',

#
# Set this to the canonical name of the interface NetDoT will be talking to the 
# database on.  If you said that the DB_HOST above was "localhost," this 
# should be too. This value will be used to grant NetDoT access to the database.
# If you want to access the NetDoT database from multiple hosts, you'll need
# to grant those database rights by hand.
#

DB_NETDOT_HOST =>  'localhost',

# set this to the name you want to give to the NetDoT database in 
# your database server. 

DB_DATABASE =>  'netdot',

# Set this to the name of the netdot database user

DB_NETDOT_USER =>  'netdot_user',

# Set this to the password used by the NetDoT database user
# *** Change This Before Installation***

DB_NETDOT_PASS =>  'netdot_pass',

#####################################################################
#
# Contact stuff
#
#####################################################################

# Email of the person or group that administers Netdot.
# Periodic maintenance scripts send their output here, for example
# when deleting old data.
# Also, by default, e-mails generated by netdot scripts use this address
# in the From line.
ADMINEMAIL  => 'netdot-admin@localdomain', 

# Email of the group that receives Netdot's informational messages
# by default. For example, reports from Device updates/validation, etc.
# are sent to this address. Parameters passed to individual scripts 
# can override this value.
NOCEMAIL  => 'noc@localdomain', 

# Path to Sendmail
SENDMAIL  => '/usr/sbin/sendmail', 

# Contact List that will be assigned by default when inserting
# Devices and other objects
# Note: The Contact List must be inserted manually in the DB
DEFAULT_CONTACTLIST  => 'Network Services Contacts', 

#####################################################################
#
# SNMP specific
#
#####################################################################

DEFAULT_SNMPTIMEOUT      =>  1000000, # micro-seconds before retry
DEFAULT_SNMPRETRIES      =>  1,
DEFAULT_SNMPVERSION      =>  2,
DEFAULT_SNMPCOMMUNITIES  =>  ['public'],
DEFAULT_SNMP_SECNAME     => 'netdot',
DEFAULT_SNMP_SECLEVEL    => 'authPriv',
DEFAULT_SNMP_AUTHPROTO   => 'SHA',
DEFAULT_SNMP_AUTHPASS    => 'auth',
DEFAULT_SNMP_PRIVPROTO   => 'AES',
DEFAULT_SNMP_PRIVPASS    => 'priv',
DEFAULT_SNMPBULK         =>  1,
DEFAULT_SNMPBULK_MAX_REPEATERS => 20,
SNMP_QUERY_TIMEOUT       =>  90,      # max seconds allowed for a query

# Netdot shares a set of workable MIBs with the Netdisco project.
# The following variable specifies where the netdisco MIBs were installed in
# this system.
SNMP_MIBS_PATH  => '/usr/share/netdisco/mibs',

# Add or remove specific vendors as you see fit. Do not remove 'net-snmp' and 'rfc' 
SNMP_MIB_DIRS            =>  [ 'allied', 'arista', 'aruba', 'asante', 
                               'cabletron', 'cisco', 'cyclades', 'dell', 
			       'enterasys', 'extreme', 'foundry',  
			       'hp', 'juniper', 'netscreen', 'net-snmp',
			       'nortel', 'rfc' ],

# Experimental: use snmp-query-engine for SNMP queries
## USE_SNMP_QUERY_ENGINE  => "127.0.0.1:7667",
USE_SNMP_QUERY_ENGINE  => 0,

# Some versions of the SNMP perl module are broken.
# Enable this flag if you know your module has been patched
IGNORE_BUGGY_SNMP_CHECK  =>  0,

# Maximum number of times that Netdot will try to update a device via SNMP before marking it as down.
# Notice that this is different from DEFAULT_SNMPRETRIES, which happen in a single run.
# After this threshold is exceeded, Netdot will mark this device as 'SNMP Down' and will not retry 
# unless 'SNMP Down' is set to 'No' again. There is a performance impact if Netdot has to 
# try connecting to a large number of devices that are not reachable for extended periods of time.
# Setting this threshold to 0 indicates that Netdot should not limit the number of atttempts.
MAX_SNMP_CONNECTION_ATTEMPTS => 5,

#####################################################################
#
# Logging details
# See Log::Log4perl for more information on these options
#
#####################################################################

LOG_OPTIONS => 	q(
		  log4perl.oneMessagePerAppender            = 1
		  log4perl.category.Netdot                  = ERROR, Syslog
		  log4perl.category.Netdot::Util            = INFO, Syslog
		  log4perl.category.Netdot::Exporter        = INFO, Syslog
		  log4perl.category.Netdot::Model           = INFO, Syslog
		  log4perl.category.Netdot::Model::DNS      = INFO, Syslog
		  log4perl.category.Netdot::Model::DHCP     = INFO, Syslog
		  log4perl.category.Netdot::Model::Device   = INFO, Syslog
		  log4perl.category.Netdot::Model::Ipblock  = INFO, Syslog
		  log4perl.category.Netdot::Topology        = INFO, Syslog
		  log4perl.category.Netdot::UI              = INFO, Syslog
		  log4perl.category.Netdot::REST            = INFO, Syslog
		  log4perl.appender.Syslog                  = Log::Dispatch::Syslog
		  log4perl.appender.Syslog.ident            = netdot
		  log4perl.appender.Syslog.facility         = local0
		  log4perl.appender.Syslog.min_level        = debug
		  log4perl.appender.Syslog.layout           = Log::Log4perl::Layout::SimpleLayout
		  ),

#####################################################################
#
# Device Management
#
#####################################################################

# Owner entity that will be assigned by default when inserting Devices
# Note: The Entity must be inserted manually in the DB
DEFAULT_DEV_OWNER  => 'Network Services',

# List of devices to be completely ignored when 
# discovering (sysObjectId)

IGNOREDEVS  => [ '1.3.6.1.4.1.11.2.3.9.1' ],


# If you prefer your interface names to be shorter, set this to 1.
# e.g. Fe0/0 instead of FastEthernet0/0
IFNAME_SHORT => 0,

# Ignore interfaces containing these strings in their names
# These are usually control plane interfaces which have no use for documentation
# Notice that if you have Junos devices, you may want to include
# 'bme\d+|me\d+' in this list, as those normally have RFC-1918 addresses
# assigned to them, which causes Netdot to create bogus subnets.
IFRESERVED  => '^(pime|mtun|lsi|jsrv|pimd|vt-|tap|pe-|pd-|dsc|rptr|unrouted)',

# Ignore the following VLANs

IGNOREVLANS  => [ '1002', '1003', '1004', '1005' ],

# Maximum VLAN ID allowed. Standard is 1-4094, but some vendors
# use higher numbers for special purposes
VALID_VLAN_ID_RANGE => [1, 4094],

# Do not add or remove ports for these devices
# i.e. HP-ICF-OID::hpAdvStkEnetSHAgent:
# These hubs assign a random value for the port group number
# every time they reboot.  For that reason we maintain their 
# ports manually 

IGNOREPORTS  => [ '1.3.6.1.4.1.11.2.3.7.8.2.5' ],

# Removing a device that has an inventory number would be given
# a warning message that other actions should be taken to make 
# sure the device gets removed from inventory. This value shows
# the default setting for whether to display the warnings.

INVENTORY_WARNING => 1, 

# Addresses matching these patterns will be ignored by Netdot.
# Pattern syntax is the same as in Perl regular expressions
# e.g IGNORE_MAC_PATTERNS  => [ '^020000' ],

IGNORE_MAC_PATTERNS  => [ ],

# Devices with these sysObjIds incorrectly report
# their duplex and/or speed interface settings.
# Exclude them from the reports.

IGNORE_DUPLEX  => [ '1.3.6.1.4.1.2021.250.10' ],

# Device Interfaces Defaults
# These are the default values of flags to be set
# when the Interface is first inserted.
# These can be changed on each Interface.
#

# Percentage of missing interfaces before we
# consider that SNMP response was truncated
# This value must be < 1 
# (e.g. 0.5 means 50%)
IF_COUNT_THRESHOLD => 0.5,

# Whether Interfaces should be monitored by default. 
# Possible values are: 
# * 0 = Set all interfaces to 'not monitored'
# * 1 = Set all interfaces to 'monitored'
# * 2 = Only set interfaces with IP addresses to 'monitored'
# * 3 = Only set interface with SNMP target address to 'monitored'

IF_MONITORED => 0,

#
# Whether Interfaces should be SNMP-managed by default
IF_SNMP => 1,
#
# Whether Interface descriptions should be overwritten
# with the values returned from SNMP (ifAlias).
IF_OVERWRITE_DESCR => 0,

# Determine the default value for the "Monitored" device flag
# based on the device type
DEFAULT_DEV_MONITORED  => {
    'Access Point'        => 1,
    'Console Server'      => 1,
    'Firewall'            => 1,
    'Hub'                 => 1,
    'IP Phone'            => 0,
    'Router'              => 1,
    'Server'              => 1,
    'Switch'              => 1,
    'Unknown'             => 0,
    'Wireless Bridge'     => 1,
    'Wireless Controller' => 1,
},

# Host templates to be assigned to particular devices in the web UI.
# For example, if using Nagios, these will be in the "use" statement, and 
# must be defined in hosts.include.
# This list is used to generate the drop-down menu for "Monitoring Template"
# in the device page. 
DEV_MONITORING_TEMPLATES => {
    'my_template_1' => 'my_template_1',
    'my_template_2' => 'my_template_2',
},

# Whether Devices configurations should be monitored 
# by default.  Config monitoring is done by third-party
# software such as RANCID.  Netdot can only export
# lists of devices to be monitored.
DEV_MONITOR_CONFIG => 1,

# Map Device types to configuration monitoring groups.
# For example, if using RANCID, here you can customize
# the groups under each device of a given type will be included.
DEV_MONITOR_CONFIG_GROUP_MAP => {
    'Switch'   => 'switches',
    'Router'   => 'routers',
    'Firewall' => 'firewalls',
},
 
# Name to Product Type mapping
#
# Use organization's naming scheme to assign type attribute
# when creating a new product.
# If none of these match, we'll use some key SNMP OIDs to guess.

DEV_NAME2TYPE => {'-ap'        => 'Access Point',
		  '-backbone'  => 'Switch',
		  '-bb'        => 'Switch',
		  '-console'   => 'Console Server', 
		  'dsl'        => 'DSL Modem', 
		  '-fw'        => 'Firewall',
		  '-hub'       => 'Hub',
		  'phone'      => 'IP Phone',
		  '-gw'        => 'Router',
		  '-sw'        => 'Switch',
		  },

# 
# Whether to automatically create peering association
# information when discovering routers
#

ADD_BGP_PEERS => 1,

# Whether to set the monitor flag when inserting new
# peering objects. This in turn determines whether
# we create service checks in Nagios for each peering.

MONITOR_BGP_PEERINGS => 1,

# 
# Whois queries for information about BGP peers
# Might want to disable to speed up router discovery
#
DO_WHOISQ => 1,
 
WHOIS_SERVER => 'whois.radb.net',

# Whether subnets should be added automatically when discovering
# a device.  Only routing devices will trigger this event.
# This can be altered when running command-line scripts

ADDSUBNETS => 1,

# Look for Spanning Tree information when discovering devices
#
GET_DEVICE_STP_INFO => 1,

# Look for Module (Physical Entity) information when discovering devices
#
GET_DEVICE_MODULE_INFO => 1,

# Whether subnet owner/user should be inherited from the corresponding
# device, when device is discovered and subnet is created.
# (Assumes 'ADDSUBNETS => 1')

SUBNET_INHERIT_DEV_INFO => 1,

# Maximum number of processes to fork when doing multiple
# SNMP queries

SNMP_MAX_PROCS => 10,

# Whether to use transactions in Device updates or not.
# Transactions ensure that data is complete.  
# They might or might not affect performance.

ATOMIC_DEVICE_UPDATES => 0,

# Polling statistics RRD file
# You probably should not changet this
POLL_STATS_FILE_PATH => 'var/pollstats.rrd',

# In some cases, certain SNMP information such
# as ARP and forwarding tables can be fetched
# via CLI instead of via SNMP. In the case of
# Cisco firewalls, it may be the only option.
# In other cases, it may be desirable because
# of its lower impact on CPU.
# This maps a pattern for the device Object ID name
# with the appropriate Netdot::Model::Device subclass.
# Notice that enabling this also requires providing
# appropriate credentials below
FETCH_DEVICE_INFO_VIA_CLI => {
    '^ciscoASA'             => 'CiscoFW',
    '^ciscoPIXFirewall'     => 'CiscoFW',
    '^ciscoWsSvcFwm1sc'     => 'CiscoFW',
    '^cat65\d{2}'           => 'CiscoIOS',
    '^cisco76\d{2}'         => 'CiscoIOS',
    '^catalyst2960'         => 'CiscoCat',
    '^cat(:?alist)?3560'    => 'CiscoCat',
    '^snNetIronMLX\d{1,2}'  => 'FoundryIW',
    '^snFGS648P'            => 'FoundryIW',
    '^snFLS648'             => 'FoundryIW',
    '^snFWS648G'            => 'FoundryIW',
    '^snTI2X24'             => 'FoundryIW',
    '^snFastIronStackICX'   => 'FoundryIW',
},

# Device CLI credentials.  These are used for fetching
# information that is missing from SNMP 
# (e.g. ARP caches from Cisco firewalls)
# Each entry in the list is keyed by a regular expression 
# which will be applied to the device 
# name to decide which credentials apply.  
# Patterns are tried sequentially, so the default set 
# should be the last one.
#
# Parameters for each entry:
#   login      - First level login
#   password   - First level password
#   privileged - Privileged password (optional)
#   transport  - 'SSH' or 'Telnet'
#   timeout    - Connection timeout in seconds
#
DEVICE_CLI_CREDENTIALS  => [	
    {   pattern     => '.*',	
	login       => 'username',
	password    => 'loginpass',	
	privileged  => 'privilegedpass',	
	transport   => 'SSH',			
	timeout     => '30',
    },		    
],		

# Enforce Device uniqueness:
# Use the serial number and the base MAC address
# values to check for duplicate devices in the DB.
# This feature can be useful but in certain cases
# can become burdensome.
ENFORCE_DEVICE_UNIQUENESS => 0,

# When fetching ARP caches from devices, Netdot
# ignores any IP that does not fall within the
# interface configured prefixes.
# This assumes that the prefixes have been created
# as Subnets already.
IGNORE_IPS_FROM_ARP_NOT_WITHIN_SUBNET => 1,

# Whether to retrieve IPv6 Neighbor Discover (ND) caches
GET_IPV6_ND => 1,

# Ignore IPv6 Link Local addresses (fe80::/10)
# from router interfaces and Neighbor Discovery tables
IGNORE_IPV6_LINK_LOCAL => 0,

# Device names in Netdot are DNS records. Normally underscores 
# are not allowed in DNS (with some exceptions). Setting this 
# to 1 will allow underscores anywhere in a device name.
ALLOW_UNDERSCORES_IN_DEVICE_NAMES => 0,

#####################################################################
#
# IP Address Space Management
#
#####################################################################

#
# IP address allocation strategy
# When a user requests an IP address, Netdot will assign either the
# first or last available address in the given subnet.
# Valid values: ['first'|'last']
IP_ALLOCATION_STRATEGY => 'first',

# Automatically reserve N addresses when a new subnet is created. 
# Depending on the setting of IP_ALLOCATION_STRATEGY, these will
# be the first or last N addresses
SUBNET_AUTO_RESERVE => 0,

# When using SUBNET_AUTO_RESERVE, start with either the first or
# last address in the given subnet
SUBNET_AUTO_RESERVE_STRATEGY => 'first',

# Subnet Usage Monitoring
# The minimum threshold of remaining space before a notification is
# sent.  That is, when the available free space reaches this percentage,
# a notification will be sent, or the subnet will appear in a report.
SUBNET_USAGE_MINPERCENT  => '10',

# IP Tree TTL
# Netdot builds a digital tree in order to quickly manipulate
# the IP address space. This tree is stored in a cache table
# to avoid recalculating it too often.  This variable sets
# the lifetime of the cached tree data in seconds
IP_TREE_TTL => '86400',

# IP BLOCK VIEW LIMITS
# Only allow block view for Subnets and Containers
# with prefix sizes equal or greater than these
SUBNET_BLOCK_VIEW_MAX_PREFIX => 19,
CONTAINER_BLOCK_VIEW_MAX_PREFIX => 16,

# List of RIRs
VALID_RIRS => {
    'AFRINIC' => 'AFRINIC',
    'APNIC'   => 'APNIC',
    'ARIN'    => 'ARIN',
    'LACNIC'  => 'LACNIC',
    'RIPE'    => 'RIPE',
    'IANA'    => 'IANA',
},

#####################################################################
# Topology Discovery
#####################################################################
# Enable or disable particular sources of topology information
# Assign a reliability score to each source

# Use Discovery Protocols (CDP, LLDP)
TOPO_USE_DP   => 1,
TOPO_WEIGHT_DP => 8,

# Use Spanning Tree Protocol
TOPO_USE_STP   => 1,
TOPO_WEIGHT_STP => 9,

# Use Forwarding Databases (forwarding tables)
TOPO_USE_FDB   => 1,
TOPO_WEIGHT_FDB => 6,

# Make this value closer to 1 if topology discovery
# based on forwarding databases is giving you false positives
# Default value seems to yield good results for our network
FDB_COMPLETENESS_RATIO => .25,

# This threshold represents the maximum number of layer2 devices that 
# should be expected to exist in a given layer2 network.
# It is used to discard devices that are connected to multiple
# segments/layer2 networks/vlans
FDB_MAX_NUM_DEVS_IN_SEGMENT => 50,

# Exclude these devices and/or addresses when determining groups
# of devices in the same physical network.  This is particularly
# useful when there are special purpose devices that connect to 
# every VLAN.
# FDB_EXCLUDE_DEVICES => [ '0123456789AB', 'DEADDEADBEEF' ],

FDB_EXCLUDE_DEVICES => [],

# Use P2P IP blocks (IPv4 /30 and /31)
TOPO_USE_P2P => 1,
TOPO_WEIGHT_P2P => 9,

# Minimum score to create a link
TOPO_MIN_SCORE => 6,

# Enable this if you want unknown devices found by discovery protocols
# (CDP/LLDP) to be added to the database when discovering topology
ADD_UNKNOWN_DP_DEVS => 1,

# When unknown devices are found by discovery protocols (CDP/LLDP), 
# do not try to add them to the database if their IP addresses 
# are within these blocks.  The values on the right are not 
# actually relevant.
EXCLUDE_UNKNOWN_DP_DEVS_FROM_BLOCKS =>	{ 
    '10.0.0.0/8' => 'rfc-1918',
},

# Remove links from database when a neighbor has not been seen this 
# many times.
# Because of the transient nature of forwarding table entries, 
# the topology discovery process tends to remove and add links
# each time it runs.  This counter avoids that situation. 
MAX_NEIGHBOR_MISSED_TIMES => 3,

# Name of your Network Monitoring System (NMS)
# This will be used as the start point when generating topology graphs, 
# and also for establishing the root of the dependency tree
# when exporting monitoring configurations for other software.
NMS_DEVICE => 'localhost',

#####################################################################
#
# DNS
#
#####################################################################

# The Default Domain Name for DNS

DEFAULT_DNSDOMAIN  => 'defaultdomain',

DEFAULT_DNSREFRESH  => 14400,  # 4 hours
DEFAULT_DNSRETRY    => 3600,   # 1 hour 
DEFAULT_DNSEXPIRE   => 605000, # 7 days 
DEFAULT_DNSMINIMUM  => 600,    # 10 min (negative caching TTL)

# Zones will be created with a default TTL of this value.
# The default TTL will be applied to records that have no TTL
# set when exporting a zonefile.
ZONE_DEFAULT_TTL  => 86400,  # 1 day (Default. TTL)

#
# Zone serial number format.  Netdot will initialize
# and update the Zone's SOA serial number differently 
# depending on this setting. Valid values are:
#
#  'dateserial'  e.g. 2009050500
#  'epoch'       e.g. 1241562763 (Unix epoch)
#  'plain'       e.g. 123
#
ZONE_SERIAL_FORMAT => 'dateserial',

# Enforce restrictions on DNS names from unprivileged
# user input.  This default regular expression
# allows names containing only alphanumeric characters,
# numbers, dots and dashes.  Anything else will throw
# an error.
DNS_NAME_USER_INPUT_REGEX => '[^A-Za-z0-9\.\-]',

# Netdot provides the option to exclude TXT and HINFO
# records when exporting zone files. This prevents
# sensitive information about hosts to be published.
# However, TXT records are sometimes used for operational
# purposes, i.e. DomainKeys, SPF, etc. For that reason,
# the administrator has the option of allowing records
# matching certain patterns. The value is a comma-separated
# list of patterns to match in the whole record.
TXT_RECORD_EXCEPTIONS => ['\._domainkey\.', 'v=spf' ],

#
# Default values for HINFO records. 
#
DEFAULT_HINFO_CPU_VALUES => {
    'PC-INTEL' => 'PC-Intel' , 
    'MAC-INTEL'=> 'Mac-Intel', 
    'MAC-PPC'  => 'Mac-PowerPC', 
}, 

DEFAULT_HINFO_OS_VALUES => {
    'WINDOWS' => 'Windows', 
    'MACOS'   => 'Mac OS', 
    'LINUX'   => 'Linux', 
},


# Netdot tries to automate the assignment of DNS names for each
# IP address associated with a Device Interface.  We chose to 
# delegate the logic to a "Plugin" class, which allows users
# to write their own behavior.  We provide three plugins:
#
# 1) DeviceIpNamesFixed: Assigns the main device name to all IPs
# 2) DeviceIpNamesByInt: Assigns names derived from the Interface
#    names. e.g. fe-1-0-0.device.localdomain.  Useful in traceroutes.
# 3) DeviceIpNamesFromDNS: Names are assigned by resolving the IP through DNS.
#
# You can use these as examples to write your own, if none of them 
# suit your needs.

UPDATE_DEVICE_IP_NAMES => 1,  # You can disable the whole thing

DEVICE_IP_NAME_PLUGIN => "Netdot::Model::Plugins::DeviceIpNamesByInt",

# When adding a range of IP addresses, the user has the option of 
# auto-generating DNS records. We delegate this behavior to 
# a plugin class for more flexibility.  Use the provided plugin
# as an example.

IP_RANGE_DNS_PLUGIN => "Netdot::Model::Plugins::IPRangeDNS",

# Default prefix and suffix for generation of DNS names for IP ranges
IP_RANGE_DNS_DEFAULT_PREFIX => 'dyn-',
IP_RANGE_DNS_DEFAULT_SUFFIX => '',

# Set the AutoUpdate flag on RR and Device objects when inserted. 
# AutoUpdate tells Netdot to use the DEVICE_IP_NAME_PLUGIN to 
# automatically assign DNS names to device IPs. Leave this flag off
# if you'd rather turn it on manually per object.

DEVICE_IP_NAME_AUTO_UPDATE_DEFAULT => 0,

# Set the zone that should be used when generating DNS records
# for device interfaces
AUTO_DNS_ZONE => "",

# When doing AUTO DNS, tell Netdot to use the AUTO_DNS_ZONE even
# when the IP block is associated with another zone
AUTO_DNS_ZONE_OVERRIDE => 0,

# Preference order of methods used for determining a device's main IP
# and name (devices with many IP addresses like routers).
#
#  sysname          - Resolve sysname.  Notice this can cause undesired
#                     results if sysnames are not unique (i.e. with
#                     redundant firewalls)
#  router_id        - the value of ospfRouterId
#  highest_ip       - Highest-numbered IP address in the device
#  lowest_loopback  - Lowest-numbered Loopback Interface with an IP
#  snmp_target      - Pick address that was used to discover device
#
DEVICE_NAMING_METHOD_ORDER => [ 'snmp_target', 'sysname', 'highest_ip', 'lowest_loopback' ],


#####################################################################
#
# Misc
#
#####################################################################

# << Make : PREFIX >> =~ s/ //g gets replaced with value of PREFIX by Makefile
TMP => "<<Make:PREFIX>>/tmp",
NETDOT_PATH => "<<Make:PREFIX>>",

#####################################################################
#  - NAGIOS - www.nagios.org
#
# You can skip these if you are not using Netdot to 
# generate Nagios configurations
#
#####################################################################

# Names of templates used by the Nagios exporter.
# These values should match what you have in the hosts.include
# file under export/nagios
NAGIOS_TEMPLATES => {
    generic_host     => 'generic-host',
    generic_service  => 'generic-service',
    generic_ping     => 'generic-ping',
    generic_trap     => 'generic-trap',
    generic_contact  => 'generic-contact',
},

# Map Netdot's service names to Nagios' plugin names
# Make sure you have all these checks defined in your Nagios config
NAGIOS_CHECKS => {
    PING     => "check_host_alive",
    IFSTATUS => "check_ifstatus",
    HTTP     => "check_http",
    HTTPS    => "check_https",
    FTP      => "check_ftp",
    NTP      => "check_ntp",
    DNS      => "check_dns",
    LDAP     => "check_ldap",
    MYSQL    => "check_mysql",
    NNTP     => "check_nntp",
    POP3     => "check_pop",
    POP3S    => "check_spop",
    SMTP     => "check_smtp",
    SSH      => "check_ssh",
    BGPPEER  => "check_bgppeer",
    DHCPD    => "check_dhcp",
    IMAP     => "check_imap",
    IMAPS    => "check_simap",
    RADIUS   => "check_radius",
    TIME     => "check_time",
    TELNET   => "check_telnet",
},

# Map Netdot's 'availability' to Nagios' timeperiods
NAGIOS_TIMEPERIODS => {
    '24x7'                     => '24x7',
    '8:00-17:00'               => 'workhours',
    'Extended Workhours'       => 'extendedworkhours',
    'Never'                    => 'none'
},
	
NAGIOS_DIR  => '<<Make:PREFIX>>/export/nagios',

NAGIOS_FILE => 'hosts.cfg',

# First and last notifications
# That is, notify on the 4th, 5th and 6th critical event
NAGIOS_NOTIF_FIRST  => 4,
NAGIOS_NOTIF_LAST   => 6,

# Notification Interval
NAGIOS_NOTIF_INTERVAL  => 0,

# Include a TRAP service for each monitored object
NAGIOS_TRAPS => 1,

# Strip off domain name from hosts
# (DEFAULT_DNSDOMAIN)
NAGIOS_STRIP_DOMAIN => 1,

# Choose which fields are used for hostgroup_name and alias values
# Valid options: 'site_name', 'site_number' (Site ID), or 'site_alias',
# 'subnet_entity_name', 'subnet_entity_alias', 
# 'usedby_entity_name', 'usedby_entity_alias'
NAGIOS_HOSTGROUP_NAME_FIELD => 'subnet_entity_name',
NAGIOS_HOSTGROUP_ALIAS_FIELD => 'subnet_entity_alias',

#####################################################################
#  - SYSMON - www.sysmon.org
#
# You can skip these if you are not using Netdot to 
# generate Sysmon configurations
# 
#####################################################################

SYSMON_DIR => '<<Make:PREFIX>>/export/sysmon',

SYSMON_FILE => 'sysmon.conf',

SYSMON_QUEUETIME => '30',

SYSMON_MAXQUEUED => '500',

SYSMON_HTML_FILE => '/var/www/html/sysmon/index.html',

SYSMON_HTML_REFRESH => '5',

SYSMON_LOG_FACILITY => 'local2',

SYSMON_STRIP_DOMAIN => 1,


#####################################################################
#  - RANCID - http://www.shrubbery.net/rancid/
#
# You can skip these if you are not using Netdot to 
# generate RANCID configurations
# 
#####################################################################

RANCID_DIR => '<<Make:PREFIX>>/export/rancid',

RANCID_FILE => 'router.db',

# These devices are known to not work with RANCID
RANCID_EXCLUDE => {
    '1.3.6.1.4.1.11.2.3.7.11.4'  => 'HP J3177AAdvancestack Switch 224',
    '1.3.6.1.4.1.11.2.3.7.11.11' => 'HP J4093A ProCurve Switch 2424M',
    '1.3.6.1.4.1.11.2.3.7.11.8'  => 'HP J4120A ProCurve Switch 1600M',
    '1.3.6.1.4.1.11.2.3.7.11.9'  => 'HP ProCurve Switch 4000M',
    '1.3.6.1.4.1.11.2.3.7.11.10' => 'HP J4122A ProCurve Switch 2400M',
    '1.3.6.1.4.1.11.2.3.7.11.7'  => 'HP J4110A ProCurve Switch 8000M',
},

# Convert these Netdot Manufacturer names into RANCID's known types
# See RANCID documentation for list of available device types
RANCID_TYPE_MAP => {
    'A10'        => 'cisco',
    'cisco'      => 'cisco',
    'enterasys'  => 'enterasys',
    'extreme'    => 'extreme',
    'force10'    => 'force10',
    'foundry'    => 'foundry',
    'Hewlett|HP' => 'hp',
    'juniper'    => 'juniper',
    'netscreen'  => 'netscreen',
},

# Newer versions of RANCID use semi-colon as the record delimiter.
# For backward compatibility, the colon is the default
RANCID_DELIM => ':',

#####################################################################
#  - BIND - www.isc.org
#
# You can skip these if you are not using Netdot to 
# generate BIND zone files
#
#####################################################################
BIND_EXPORT_DIR => '<<Make:PREFIX>>/export/bind',

#####################################################################
#  - DHCPD - www.isc.org
#
# You can skip these if you are not using Netdot to 
# generate DHCPD config files
#
#####################################################################
DHCPD_EXPORT_DIR => '<<Make:PREFIX>>/export/dhcpd',

# Currently ISC DHCPD claims to have support for using the Ethernet
# address as a client ID. However, this is not standard and it may not
# work with every client because it will depend on wether the client 
# uses DUID-LL or DUID-LLT. 
# We do not offer the user the option by default.
DHCPD_ALLOW_ETHERNET_FOR_IPV6_HOST_DECL => 0,

#####################################################################
#  - Smokeping - http://oss.oetiker.ch/smokeping/
#
# You can skip these if you are not using Netdot to 
# generate Smokeping config files
#
#####################################################################
SMOKEPING_DIR => '<<Make:PREFIX>>/export/smokeping',

SMOKEPING_FILE => 'config',

}
